//para cargar imagen
#define STB_IMAGE_IMPLEMENTATION

#include <stdio.h>
#include <string.h>
#include <cmath>
#include <vector>
#include <math.h>

#include <glew.h>
#include <glfw3.h>

#include <glm.hpp>
#include <gtc\matrix_transform.hpp>
#include <gtc\type_ptr.hpp>
//para probar el importer
//#include<assimp/Importer.hpp>

#include "Window.h"
#include "Mesh.h"
#include "Shader_light.h"
#include "Camera.h"
#include "Texture.h"
#include "Sphere.h"
#include"Model.h"
#include "Skybox.h"

//para iluminaci�n
#include "CommonValues.h"
#include "DirectionalLight.h"
#include "PointLight.h"
#include "SpotLight.h"
#include "Material.h"
const float toRadians = 3.14159265f / 180.0f;
using std::vector;
const float PI = 3.14159265f;

Window mainWindow;
std::vector<Mesh*> meshList;
std::vector<Shader> shaderList;

Camera camera;

Texture pisoTexture;

Model CentroPokemon_M;
Texture centroPokemonTexture;

Model Arco_M;
Texture stoneTexture;

Model PortonIzquierdo_M;
Model PortonDerecho_M;
Texture blackMetalTexture;

Model Letrero_M;
Texture letreroTexture;

Model Torii_M;
Texture toriiTexture;

Model Puerto_M;
Texture puertoTexture;

Model Ichiraku_M;
Texture ichirakuTexture;

Model PuestoTacos_M;
Texture puestoTacosTexture;

Model PuestoElotes_M;
Texture puestoElotesTexture;

Model PuestoPozole_M;
Texture puestoPozoleTexture;

Model PuestoPlantas_M;
Texture puestoPlantasTexture;

Model PuestoRecuerdos_M;
Texture puestoRecuerdosTexture;

Model PuestoLuchas_M;
Texture puestoLuchasTexture;

Model Bangboo_M;
Texture bangbooTexture;

Model Stool_M;
Texture stoolTexture;

Texture farolaTexture;
Model Farola_M;

Texture pokefanTexture;
Model Pokefan_M;

Texture pokeshopTexture;
Model Pokeshop_M;

Texture piramideTexture;
Model Piramide_M;

Texture calendarioMayaTexture;

Texture hawluchaTexture;
Model Hawlucha_M;

Texture ringTexture;
Model Ring_M;

Texture caminoTexture;
Model Camino_M;

Texture sillaTexture;
Model Silla_M;

Texture pidgeyTexture;
Model Pidgey_M;

Skybox skybox;

//materiales
Material Material_brillante;
Material Material_opaco;


//Sphere cabeza = Sphere(0.5, 20, 20);
GLfloat deltaTime = 0.0f;
GLfloat lastTime = 0.0f;
static double limitFPS = 1.0 / 60.0;

// luz direccional
DirectionalLight mainLight;
//para declarar varias luces de tipo pointlight
PointLight pointLights[MAX_POINT_LIGHTS];
SpotLight spotLights[MAX_SPOT_LIGHTS];

// Vertex Shader
static const char* vShader = "shaders/shader_light.vert";

// Fragment Shader
static const char* fShader = "shaders/shader_light.frag";


//funci�n de calculo de normales por promedio de v�rtices 
void calcAverageNormals(unsigned int* indices, unsigned int indiceCount, GLfloat* vertices, unsigned int verticeCount,
	unsigned int vLength, unsigned int normalOffset)
{
	for (size_t i = 0; i < indiceCount; i += 3)
	{
		unsigned int in0 = indices[i] * vLength;
		unsigned int in1 = indices[i + 1] * vLength;
		unsigned int in2 = indices[i + 2] * vLength;
		glm::vec3 v1(vertices[in1] - vertices[in0], vertices[in1 + 1] - vertices[in0 + 1], vertices[in1 + 2] - vertices[in0 + 2]);
		glm::vec3 v2(vertices[in2] - vertices[in0], vertices[in2 + 1] - vertices[in0 + 1], vertices[in2 + 2] - vertices[in0 + 2]);
		glm::vec3 normal = glm::cross(v1, v2);
		normal = glm::normalize(normal);

		in0 += normalOffset; in1 += normalOffset; in2 += normalOffset;
		vertices[in0] += normal.x; vertices[in0 + 1] += normal.y; vertices[in0 + 2] += normal.z;
		vertices[in1] += normal.x; vertices[in1 + 1] += normal.y; vertices[in1 + 2] += normal.z;
		vertices[in2] += normal.x; vertices[in2 + 1] += normal.y; vertices[in2 + 2] += normal.z;
	}

	for (size_t i = 0; i < verticeCount / vLength; i++)
	{
		unsigned int nOffset = i * vLength + normalOffset;
		glm::vec3 vec(vertices[nOffset], vertices[nOffset + 1], vertices[nOffset + 2]);
		vec = glm::normalize(vec);
		vertices[nOffset] = vec.x; vertices[nOffset + 1] = vec.y; vertices[nOffset + 2] = vec.z;
	}
}


/*
Crear cilindro y cono con arreglos dinámicos vector creados en el Semestre 2023 - 1 : por Sánchez Pérez Omar Alejandro
*/
void CrearCilindro(int res, float R) {
	//constantes utilizadas en los ciclos for
	int n, i;
	//cálculo del paso interno en la circunferencia y variables que almacenarán cada coordenada de cada vértice
	GLfloat dt = 2 * PI / res, x, z, y = -0.5f;

	vector<GLfloat> vertices;
	vector<unsigned int> indices;

	// ===== PAREDES LATERALES (usarán el aro circular de la textura) =====
	for (n = 0; n <= res; n++) {
		float angle = n * dt;
		if (n != res) {
			x = R * cos(angle);
			z = R * sin(angle);
		}
		//caso para terminar el círculo
		else {
			x = R * cos(0);
			z = R * sin(0);
		}

		// Calcular coordenadas de textura para el aro circular
		// El aro circular está entre radio 0.5 y 1.0 en la textura
		float texU_outer = 0.5f + 0.5f * cos(angle);  // Borde exterior del aro
		float texV_outer = 0.5f + 0.5f * sin(angle);
		float texU_inner = 0.5f + 0.25f * cos(angle); // Borde interior del aro  
		float texV_inner = 0.5f + 0.25f * sin(angle);

		// Calcular normales para las paredes (radiales)
		float nx = cos(angle);
		float nz = sin(angle);

		// Vértice INFERIOR de la pared - usa borde EXTERIOR del aro (parte de abajo)
		vertices.push_back(x);        // posición x
		vertices.push_back(-0.5f);    // posición y
		vertices.push_back(z);        // posición z
		vertices.push_back(texU_outer); // coordenada u (borde exterior del aro)
		vertices.push_back(texV_outer); // coordenada v
		vertices.push_back(nx);       // normal x
		vertices.push_back(0.0f);     // normal y
		vertices.push_back(nz);       // normal z

		// Vértice SUPERIOR de la pared - usa borde INTERIOR del aro (parte de arriba)
		vertices.push_back(x);        // posición x
		vertices.push_back(0.5f);     // posición y
		vertices.push_back(z);        // posición z
		vertices.push_back(texU_inner); // coordenada u (borde interior del aro)
		vertices.push_back(texV_inner); // coordenada v
		vertices.push_back(nx);       // normal x
		vertices.push_back(0.0f);     // normal y
		vertices.push_back(nz);       // normal z
	}

	// ===== TAPA INFERIOR (círculo completo 1:1) =====
	int baseInferior = vertices.size() / 8; // Índice base para la tapa inferior

	// Centro de la tapa inferior
	vertices.push_back(0.0f);     // x
	vertices.push_back(-0.5f);    // y
	vertices.push_back(0.0f);     // z
	vertices.push_back(0.5f);     // u (centro de la textura)
	vertices.push_back(0.5f);     // v (centro de la textura)
	vertices.push_back(0.0f);     // normal x
	vertices.push_back(-1.0f);    // normal y (apunta hacia abajo)
	vertices.push_back(0.0f);     // normal z

	// Vértices del borde de la tapa inferior
	for (n = 0; n <= res; n++) {
		float angle = n * dt;
		x = R * cos(angle);
		z = R * sin(angle);

		// Coordenadas de textura: círculo completo centrado
		float texU = 0.5f + 0.5f * cos(angle);
		float texV = 0.5f + 0.5f * sin(angle);

		vertices.push_back(x);    // x
		vertices.push_back(-0.5f); // y
		vertices.push_back(z);    // z
		vertices.push_back(texU); // u (círculo completo)
		vertices.push_back(texV); // v (círculo completo)
		vertices.push_back(0.0f); // normal x
		vertices.push_back(-1.0f); // normal y (apunta hacia abajo)
		vertices.push_back(0.0f); // normal z
	}

	// ===== TAPA SUPERIOR (círculo completo 1:1) =====
	int baseSuperior = vertices.size() / 8; // Índice base para la tapa superior

	// Centro de la tapa superior
	vertices.push_back(0.0f);     // x
	vertices.push_back(0.5f);     // y
	vertices.push_back(0.0f);     // z
	vertices.push_back(0.5f);     // u (centro de la textura)
	vertices.push_back(0.5f);     // v (centro de la textura)
	vertices.push_back(0.0f);     // normal x
	vertices.push_back(1.0f);     // normal y (apunta hacia arriba)
	vertices.push_back(0.0f);     // normal z

	// Vértices del borde de la tapa superior
	for (n = 0; n <= res; n++) {
		float angle = n * dt;
		x = R * cos(angle);
		z = R * sin(angle);

		// Coordenadas de textura: círculo completo centrado
		float texU = 0.5f + 0.5f * cos(angle);
		float texV = 0.5f + 0.5f * sin(angle);

		vertices.push_back(x);    // x
		vertices.push_back(0.5f); // y
		vertices.push_back(z);    // z
		vertices.push_back(texU); // u (círculo completo)
		vertices.push_back(texV); // v (círculo completo)
		vertices.push_back(0.0f); // normal x
		vertices.push_back(1.0f); // normal y (apunta hacia arriba)
		vertices.push_back(0.0f); // normal z
	}

	// ===== GENERAR ÍNDICES =====

	// Índices para las PAREDES LATERALES (usando triangle strips)
	for (n = 0; n < res; n++) {
		int base = n * 2;

		// Primer triángulo (sentido antihorario)
		indices.push_back(base);
		indices.push_back(base + 2);
		indices.push_back(base + 1);

		// Segundo triángulo
		indices.push_back(base + 1);
		indices.push_back(base + 2);
		indices.push_back(base + 3);
	}

	// Índices para la TAPA INFERIOR (triangle fan)
	int centroInferior = baseInferior;
	int primerVerticeInferior = baseInferior + 1;
	for (n = 0; n < res; n++) {
		indices.push_back(centroInferior);
		indices.push_back(primerVerticeInferior + n);
		indices.push_back(primerVerticeInferior + ((n + 1) % res));
	}

	// Índices para la TAPA SUPERIOR (triangle fan)
	int centroSuperior = baseSuperior;
	int primerVerticeSuperior = baseSuperior + 1;
	for (n = 0; n < res; n++) {
		indices.push_back(centroSuperior);
		indices.push_back(primerVerticeSuperior + ((n + 1) % res)); // Sentido invertido para normal correcta
		indices.push_back(primerVerticeSuperior + n);
	}

	//se genera el mesh del cilindro
	Mesh* cilindro = new Mesh();
	cilindro->CreateMesh(&vertices[0], &indices[0], vertices.size(), indices.size());
	meshList.push_back(cilindro);
}

void CreateObjects()
{
	unsigned int indices[] = {
		0, 3, 1,
		1, 3, 2,
		2, 3, 0,
		0, 1, 2
	};

	GLfloat vertices[] = {
		//	x      y      z			u	  v			nx	  ny    nz
			-1.0f, -1.0f, -0.6f,	0.0f, 0.0f,		0.0f, 0.0f, 0.0f,
			0.0f, -1.0f, 1.0f,		0.5f, 0.0f,		0.0f, 0.0f, 0.0f,
			1.0f, -1.0f, -0.6f,		1.0f, 0.0f,		0.0f, 0.0f, 0.0f,
			0.0f, 1.0f, 0.0f,		0.5f, 1.0f,		0.0f, 0.0f, 0.0f
	};


	unsigned int Suelo3DIndices[] = {
		0, 1, 2,
		0, 3, 1,
		3, 4, 1,
		3, 5, 4,
		6, 4, 7,
		6, 1, 4,
		7, 8, 9,
		9, 10, 7,
		10, 6, 7,
		11, 12, 13,
		11, 14, 12,
		10, 15, 6,
		10, 16, 15,
		17, 18, 19,
		20, 21, 18,
		10, 9, 22,
		23, 9, 24,
		23, 25, 9,
		26, 27, 28,
		27, 29, 30,
		31, 32, 33,
		31, 29, 32,
		32, 34, 35,
		32, 29, 34,
		34, 27, 36,
		34, 29, 27,
		37, 38, 39,
		40, 41, 42,
		40, 43, 41,
		44, 19, 45,
		44, 17, 19,
		46, 47, 48,
		46, 49, 47,
		50, 51, 52,
		50, 53, 51,
		49, 54, 55,
		49, 56, 54,
		44, 47, 55,
		44, 45, 47,
		45, 57, 47,
		47, 49, 55,
		58, 9, 43,
		9, 25, 59,
		27, 21, 36,
		27, 18, 21,
		21, 20, 60,
		60, 20, 61,
		62, 63, 64,
		62, 65, 63,
		65, 66, 63,
		65, 67, 66,
		68, 66, 69,
		68, 63, 66,
		69, 70, 71,
		71, 72, 69,
		72, 68, 69,
		73, 74, 75,
		73, 76, 74,
		72, 77, 68,
		72, 78, 77,
		79, 80, 81,
		82, 83, 80,
		72, 71, 84,
		85, 71, 86,
		85, 87, 71,
		88, 89, 90,
		89, 91, 92,
		93, 94, 95,
		93, 91, 94,
		94, 96, 97,
		94, 91, 96,
		96, 89, 98,
		96, 91, 89,
		99, 100, 101,
		102, 103, 104,
		105, 106, 107,
		105, 108, 106,
		109, 81, 110,
		109, 79, 81,
		111, 112, 113,
		111, 114, 112,
		115, 116, 117,
		115, 118, 116,
		114, 119, 120,
		114, 121, 119,
		109, 112, 120,
		109, 110, 112,
		110, 122, 112,
		112, 114, 120,
		123, 71, 108,
		71, 87, 124,
		89, 83, 98,
		89, 80, 83,
		83, 82, 102,
		102, 82, 103,
		125, 126, 127,
		128, 129, 130,
		131, 132, 133,
		134, 135, 136,
		137, 138, 139,
		140, 141, 142,
		143, 144, 145,
		146, 147, 148,
		149, 150, 151,
		152, 153, 154,
		155, 156, 157,
		158, 159, 160,
		161, 162, 163,
		164, 165, 166,
		167, 168, 169,
		170, 171, 172,
		173, 174, 175,
		176, 177, 178,
		179, 180, 181,
		182, 183, 184,
		185, 186, 187,
		188, 189, 190,
		191, 192, 193,
		194, 195, 196,
		197, 198, 199,
		197, 200, 198,
		201, 202, 203,
		201, 204, 202,
		205, 206, 207,
		208, 209, 206,
		210, 211, 212,
		213, 214, 215,
		216, 217, 218,
		219, 220, 221,
		222, 223, 224,
		225, 226, 227,
		228, 229, 226,
		230, 231, 232,
		233, 234, 235,
		236, 237, 238,
		239, 240, 241,
		242, 243, 244,
		245, 246, 247,
		248, 249, 250,
		251, 252, 253,
		254, 255, 256,
		257, 258, 259,
		260, 261, 262,
		263, 264, 265,
		266, 267, 268,
		269, 270, 271,
		269, 272, 270,
		273, 274, 275,
		276, 277, 278,
		279, 280, 281,
		282, 283, 284,
		282, 285, 283,
		286, 287, 288,
		286, 289, 287,
		290, 291, 292,
		293, 294, 295,
		296, 297, 298,
		299, 300, 301,
		302, 303, 304,
		305, 306, 307,
		305, 308, 306,
		309, 310, 311,
		312, 313, 314,
		315, 316, 317,
		315, 318, 319,
		320, 321, 322,
		323, 324, 325,
		326, 327, 328,
		326, 329, 330,
		331, 332, 333,
		331, 334, 332,
		335, 336, 337,
		335, 338, 336,
		339, 340, 341,
		339, 342, 340,
		343, 344, 345,
		346, 347, 348,
		349, 350, 351,
		352, 353, 354,
		355, 356, 357,
		358, 359, 360,
		361, 362, 363,
		364, 365, 362,
		366, 367, 368,
		369, 370, 371,
		372, 373, 374,
		375, 376, 377,
		378, 372, 379,
		380, 381, 382,
		383, 384, 385,
		384, 386, 385,
		380, 387, 388,
		389, 390, 391,
		389, 392, 393,
		394, 395, 396,
		60, 397, 398,
	};

	GLfloat Suelo3DVertices[] = {
		-0.981502f, -0.269080f, -0.503788f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.641992f, -0.394315f, -0.121212f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.653541f, -0.390055f, -0.494298f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-1.000000f, -0.262258f, 0.928030f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.450632f, -0.464902f, 0.886364f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.456805f, -0.462626f, 0.939394f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.305569f, -0.518413f, -0.113636f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.321001f, -0.512720f, 0.886364f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.321001f, -0.512720f, 0.920455f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.240753f, -0.542320f, 0.924242f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.256186f, -0.536631f, -0.109848f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.336433f, -0.507026f, -0.579545f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.296309f, -0.521826f, -0.515151f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.333347f, -0.508167f, -0.515151f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.246926f, -0.540043f, -0.579545f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.296309f, -0.521826f, -0.515151f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.246926f, -0.540043f, -0.579545f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.101843f, -0.668695f, -0.106061f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.240753f, -0.542320f, 0.924242f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.064826f, -0.607218f, -0.125000f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.237647f, -0.718789f, -0.109848f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.716047f, -0.895259f, 0.030303f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.064826f, -0.607218f, -0.125000f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.929012f, -0.973817f, 0.962121f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		-0.240753f, -0.542320f, 1.000000f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.932098f, -0.974953f, 0.727273f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.932098f, -0.974953f, 0.727273f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.978395f, -0.992030f, 0.446970f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.978395f, -0.992030f, 0.719697f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.981481f, -0.993170f, -0.996212f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		1.000000f, -1.000000f, 0.446970f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.490736f, -0.812148f, -1.000000f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.756170f, -0.910059f, -0.640152f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.481476f, -0.808731f, -0.655303f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.805554f, -0.928276f, -0.484848f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.746911f, -0.906642f, -0.484848f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.808640f, -0.929412f, 0.045454f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.657404f, -0.873625f, -0.318182f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.716047f, -0.895259f, 0.030303f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.722219f, -0.897535f, -0.310606f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.240733f, -0.719930f, -0.518939f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.561724f, -0.838331f, -0.393939f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.570983f, -0.841748f, -0.518939f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.237647f, -0.718789f, -0.109848f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.101843f, -0.668695f, -0.231061f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.067912f, -0.606078f, -0.219697f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.163592f, -0.570784f, -0.674242f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.104950f, -0.592414f, -0.268939f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.163592f, -0.570784f, -0.268939f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.095690f, -0.595831f, -0.685606f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.163572f, -0.691466f, -0.670454f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.101843f, -0.668695f, -0.231061f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.154312f, -0.688049f, -0.231061f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.108016f, -0.670972f, -0.681818f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.108016f, -0.670972f, -0.708333f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.108016f, -0.670972f, -0.681818f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.095690f, -0.595831f, -0.715909f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.104950f, -0.592414f, -0.219697f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.101843f, -0.668695f, -0.106061f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.978395f, -0.992030f, 0.446970f, 0.000000f, 0.000000f, 0.010700f, 0.999900f, -0.000000f,
		0.657404f, -0.873625f, -0.318182f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		0.561724f, -0.838331f, -0.393939f, 0.000000f, 0.000000f, -0.010700f, -0.999900f, -0.000000f,
		-0.928907f, 0.993439f, -0.490384f, 0.106850f, 0.744049f, 0.010700f, 0.999900f, -0.000000f,
		-0.602455f, 0.873021f, -0.127417f, 0.254659f, 0.573848f, 0.010700f, 0.999900f, -0.000000f,
		-0.613560f, 0.877116f, -0.481380f, 0.249631f, 0.739828f, 0.010700f, 0.999900f, -0.000000f,
		-0.946694f, 1.000000f, 0.868046f, 0.098796f, 0.107057f, 0.010700f, 0.999900f, -0.000000f,
		-0.418455f, 0.805148f, 0.828515f, 0.337970f, 0.125594f, 0.010700f, 0.999900f, -0.000000f,
		-0.424391f, 0.807338f, 0.878827f, 0.335282f, 0.102001f, 0.010700f, 0.999900f, -0.000000f,
		-0.278971f, 0.753699f, -0.120230f, 0.401125f, 0.570477f, 0.010700f, 0.999900f, -0.000000f,
		-0.293810f, 0.759170f, 0.828515f, 0.394406f, 0.125594f, 0.010700f, 0.999900f, -0.000000f,
		-0.293810f, 0.759170f, 0.860859f, 0.394406f, 0.110427f, 0.010700f, 0.999900f, -0.000000f,
		-0.216649f, 0.730710f, 0.864452f, 0.429343f, 0.108742f, 0.010700f, 0.999900f, -0.000000f,
		-0.231487f, 0.736180f, -0.116636f, 0.422625f, 0.568792f, 0.010700f, 0.999900f, -0.000000f,
		-0.308649f, 0.764644f, -0.562258f, 0.387688f, 0.777753f, -0.010700f, -0.999900f, -0.000000f,
		-0.270068f, 0.750414f, -0.501165f, 0.405156f, 0.749105f, -0.010700f, -0.999900f, -0.000000f,
		-0.305681f, 0.763549f, -0.501165f, 0.389031f, 0.749105f, -0.010700f, -0.999900f, -0.000000f,
		-0.222584f, 0.732899f, -0.562258f, 0.426656f, 0.777753f, -0.010700f, -0.999900f, -0.000000f,
		-0.270068f, 0.750414f, -0.501165f, 0.405156f, 0.749105f, 0.010700f, 0.999900f, -0.000000f,
		-0.222584f, 0.732899f, -0.562258f, 0.426656f, 0.777753f, 0.010700f, 0.999900f, -0.000000f,
		0.112771f, 0.609193f, -0.113042f, 0.578497f, 0.567107f, -0.010700f, -0.999900f, -0.000000f,
		-0.216649f, 0.730710f, 0.864452f, 0.429343f, 0.108742f, -0.010700f, -0.999900f, -0.000000f,
		-0.047487f, 0.668311f, -0.131011f, 0.505935f, 0.575533f, -0.010700f, -0.999900f, -0.000000f,
		0.243351f, 0.561029f, -0.116636f, 0.637620f, 0.568792f, -0.010700f, -0.999900f, -0.000000f,
		0.703351f, 0.391348f, 0.016332f, 0.845897f, 0.506441f, -0.010700f, -0.999900f, -0.000000f,
		-0.047487f, 0.668311f, -0.131011f, 0.505935f, 0.575533f, 0.010700f, 0.999900f, -0.000000f,
		0.908126f, 0.315810f, 0.900390f, 0.938614f, 0.091890f, 0.010700f, 0.999900f, -0.000000f,
		-0.216649f, 0.730710f, 0.936327f, 0.429343f, 0.075039f, 0.010700f, 0.999900f, -0.000000f,
		0.911093f, 0.314715f, 0.677579f, 0.939958f, 0.196371f, 0.010700f, 0.999900f, -0.000000f,
		0.911093f, 0.314715f, 0.677579f, 0.939958f, 0.196371f, -0.010700f, -0.999900f, -0.000000f,
		0.955609f, 0.298296f, 0.411642f, 0.960114f, 0.321073f, -0.010700f, -0.999900f, -0.000000f,
		0.955609f, 0.298296f, 0.670391f, 0.960114f, 0.199741f, -0.010700f, -0.999900f, -0.000000f,
		0.958577f, 0.297201f, -0.957569f, 0.961458f, 0.963121f, -0.010700f, -0.999900f, -0.000000f,
		0.976384f, 0.290631f, 0.411643f, 0.969520f, 0.321073f, -0.010700f, -0.999900f, -0.000000f,
		0.486706f, 0.471261f, -0.961162f, 0.747806f, 0.964806f, -0.010700f, -0.999900f, -0.000000f,
		0.741932f, 0.377114f, -0.619758f, 0.863366f, 0.804715f, -0.010700f, -0.999900f, -0.000000f,
		0.477803f, 0.474546f, -0.634133f, 0.743774f, 0.811456f, -0.010700f, -0.999900f, -0.000000f,
		0.789416f, 0.359599f, -0.472415f, 0.884865f, 0.735624f, -0.010700f, -0.999900f, -0.000000f,
		0.733029f, 0.380399f, -0.472415f, 0.859335f, 0.735624f, -0.010700f, -0.999900f, -0.000000f,
		0.792384f, 0.358504f, 0.030707f, 0.886209f, 0.499700f, -0.010700f, -0.999900f, -0.000000f,
		0.646964f, 0.412148f, -0.314291f, 0.820367f, 0.661476f, 0.010700f, 0.999900f, -0.000000f,
		0.703351f, 0.391348f, 0.016332f, 0.845897f, 0.506441f, 0.010700f, 0.999900f, -0.000000f,
		0.709287f, 0.389158f, -0.307104f, 0.848585f, 0.658106f, 0.010700f, 0.999900f, -0.000000f,
		0.646964f, 0.412148f, -0.314291f, 0.820367f, 0.661476f, -0.010700f, -0.999900f, -0.000000f,
		0.554964f, 0.446082f, -0.386166f, 0.778711f, 0.695180f, -0.010700f, -0.999900f, -0.000000f,
		0.652900f, 0.409958f, -0.375384f, 0.823054f, 0.690124f, -0.010700f, -0.999900f, -0.000000f,
		0.246319f, 0.559934f, -0.504759f, 0.638964f, 0.750790f, 0.010700f, 0.999900f, -0.000000f,
		0.554964f, 0.446082f, -0.386166f, 0.778711f, 0.695180f, 0.010700f, 0.999900f, -0.000000f,
		0.563868f, 0.442797f, -0.504759f, 0.782743f, 0.750790f, 0.010700f, 0.999900f, -0.000000f,
		0.243351f, 0.561029f, -0.116636f, 0.637620f, 0.568792f, 0.010700f, 0.999900f, -0.000000f,
		0.112771f, 0.609193f, -0.231635f, 0.578497f, 0.622717f, -0.010700f, -0.999900f, -0.000000f,
		-0.050455f, 0.669406f, -0.220854f, 0.504592f, 0.617662f, -0.010700f, -0.999900f, -0.000000f,
		-0.142455f, 0.703341f, -0.652102f, 0.462936f, 0.819882f, -0.010700f, -0.999900f, -0.000000f,
		-0.086068f, 0.682541f, -0.267572f, 0.488467f, 0.639569f, -0.010700f, -0.999900f, -0.000000f,
		-0.142455f, 0.703341f, -0.267572f, 0.462936f, 0.639569f, -0.010700f, -0.999900f, -0.000000f,
		-0.077165f, 0.679256f, -0.662883f, 0.492498f, 0.824937f, -0.010700f, -0.999900f, -0.000000f,
		0.172126f, 0.587299f, -0.648508f, 0.605371f, 0.818197f, 0.010700f, 0.999900f, -0.000000f,
		0.112771f, 0.609193f, -0.231635f, 0.578497f, 0.622717f, 0.010700f, 0.999900f, -0.000000f,
		0.163222f, 0.590584f, -0.231635f, 0.601340f, 0.622717f, 0.010700f, 0.999900f, -0.000000f,
		0.118706f, 0.607008f, -0.659289f, 0.581184f, 0.823252f, 0.010700f, 0.999900f, -0.000000f,
		0.118706f, 0.607008f, -0.684445f, 0.581184f, 0.835048f, -0.010700f, -0.999900f, -0.000000f,
		0.118706f, 0.607008f, -0.659289f, 0.581184f, 0.823252f, -0.010700f, -0.999900f, -0.000000f,
		-0.077165f, 0.679256f, -0.691633f, 0.492498f, 0.838418f, -0.010700f, -0.999900f, -0.000000f,
		-0.086068f, 0.682541f, -0.220854f, 0.488467f, 0.617662f, -0.010700f, -0.999900f, -0.000000f,
		0.112771f, 0.609193f, -0.113042f, 0.578497f, 0.567107f, 0.010700f, 0.999900f, -0.000000f,
		0.955609f, 0.298296f, 0.411642f, 0.960114f, 0.321073f, 0.010700f, 0.999900f, -0.000000f,
		-0.653541f, -0.390055f, -0.494298f, 0.231528f, 0.745885f, 0.025200f, 0.250500f, -0.967800f,
		-0.928907f, 0.993439f, -0.490384f, 0.106850f, 0.744049f, 0.025200f, 0.250500f, -0.967800f,
		-0.613560f, 0.877116f, -0.481380f, 0.249631f, 0.739828f, 0.025200f, 0.250500f, -0.967800f,
		-0.981502f, -0.269080f, -0.503788f, 0.083036f, 0.750335f, -0.025500f, -0.252600f, 0.967200f,
		-0.653541f, -0.390055f, -0.494298f, 0.231528f, 0.745885f, -0.025500f, -0.252600f, 0.967200f,
		-0.928907f, 0.993439f, -0.490384f, 0.106850f, 0.744049f, -0.025500f, -0.252600f, 0.967200f,
		-0.981502f, -0.269080f, -0.503788f, 0.083036f, 0.750335f, 0.570700f, -0.821100f, 0.009200f,
		-0.946694f, 1.000000f, 0.868046f, 0.098796f, 0.107057f, 0.570700f, -0.821100f, 0.009200f,
		-1.000000f, -0.262258f, 0.928030f, 0.074660f, 0.078929f, 0.570700f, -0.821100f, 0.009200f,
		-0.928907f, 0.993439f, -0.490384f, 0.106850f, 0.744049f, -0.569000f, 0.822300f, -0.009300f,
		-0.981502f, -0.269080f, -0.503788f, 0.083036f, 0.750335f, -0.569000f, 0.822300f, -0.009300f,
		-0.946694f, 1.000000f, 0.868046f, 0.098796f, 0.107057f, -0.569000f, 0.822300f, -0.009300f,
		-1.000000f, -0.262258f, 0.928030f, 0.074660f, 0.078929f, 0.001600f, -0.802100f, -0.597200f,
		-0.946694f, 1.000000f, 0.868046f, 0.098796f, 0.107057f, 0.001600f, -0.802100f, -0.597200f,
		-0.456805f, -0.462626f, 0.939394f, 0.320606f, 0.073600f, 0.001600f, -0.802100f, -0.597200f,
		-0.946694f, 1.000000f, 0.868046f, 0.098796f, 0.107057f, -0.001500f, 0.802700f, 0.596400f,
		-0.456805f, -0.462626f, 0.939394f, 0.320606f, 0.073600f, -0.001500f, 0.802700f, 0.596400f,
		-0.424391f, 0.807338f, 0.878827f, 0.335282f, 0.102001f, -0.001500f, 0.802700f, 0.596400f,
		-0.216649f, 0.730710f, 0.936327f, 0.429343f, 0.075039f, -0.024100f, -0.810000f, -0.586000f,
		0.929012f, -0.973817f, 0.962121f, 0.948071f, 0.062943f, -0.024100f, -0.810000f, -0.586000f,
		-0.240753f, -0.542320f, 1.000000f, 0.418429f, 0.045181f, -0.024100f, -0.810000f, -0.586000f,
		0.908126f, 0.315810f, 0.900390f, 0.938614f, 0.091890f, 0.024000f, 0.807800f, 0.589000f,
		-0.216649f, 0.730710f, 0.936327f, 0.429343f, 0.075039f, 0.024000f, 0.807800f, 0.589000f,
		0.929012f, -0.973817f, 0.962121f, 0.948071f, 0.062943f, 0.024000f, 0.807800f, 0.589000f,
		-0.240753f, -0.542320f, 0.924242f, 0.418429f, 0.080705f, 0.836600f, -0.547800f, -0.000000f,
		-0.216649f, 0.730710f, 0.936327f, 0.429343f, 0.075039f, 0.836600f, -0.547800f, -0.000000f,
		-0.240753f, -0.542320f, 1.000000f, 0.418429f, 0.045181f, 0.836600f, -0.547800f, -0.000000f,
		-0.216649f, 0.730710f, 0.936327f, 0.429343f, 0.075039f, -0.836600f, 0.547800f, -0.000000f,
		-0.216649f, 0.730710f, 0.864452f, 0.429343f, 0.108742f, -0.836600f, 0.547800f, -0.000000f,
		-0.240753f, -0.542320f, 0.924242f, 0.418429f, 0.080705f, -0.836600f, 0.547800f, -0.000000f,
		-0.240753f, -0.542320f, 0.924242f, 0.418429f, 0.080705f, 0.014500f, -0.801200f, -0.598300f,
		-0.321001f, -0.512720f, 0.920455f, 0.382095f, 0.082481f, 0.014500f, -0.801200f, -0.598300f,
		-0.216649f, 0.730710f, 0.864452f, 0.429343f, 0.108742f, 0.014500f, -0.801200f, -0.598300f,
		-0.216649f, 0.730710f, 0.864452f, 0.429343f, 0.108742f, -0.014200f, 0.800900f, 0.598700f,
		-0.293810f, 0.759170f, 0.860859f, 0.394406f, 0.110427f, -0.014200f, 0.800900f, 0.598700f,
		-0.321001f, -0.512720f, 0.920455f, 0.382095f, 0.082481f, -0.014200f, 0.800900f, 0.598700f,
		-0.321001f, -0.512720f, 0.920455f, 0.382095f, 0.082481f, 0.804100f, -0.594400f, -0.000000f,
		-0.321001f, -0.512720f, 0.886364f, 0.382095f, 0.098467f, 0.804100f, -0.594400f, -0.000000f,
		-0.293810f, 0.759170f, 0.860859f, 0.394406f, 0.110427f, 0.804100f, -0.594400f, -0.000000f,
		-0.293810f, 0.759170f, 0.860859f, 0.394406f, 0.110427f, -0.804100f, 0.594400f, -0.000000f,
		-0.293810f, 0.759170f, 0.828515f, 0.394406f, 0.125594f, -0.804100f, 0.594400f, -0.000000f,
		-0.321001f, -0.512720f, 0.886364f, 0.382095f, 0.098467f, -0.804100f, 0.594400f, -0.000000f,
		-0.456805f, -0.462626f, 0.939394f, 0.000000f, 0.000000f, -0.817700f, 0.563500f, -0.117700f,
		-0.424391f, 0.807338f, 0.878827f, 0.000000f, 0.000000f, -0.817700f, 0.563500f, -0.117700f,
		-0.450632f, -0.464902f, 0.886364f, 0.000000f, 0.000000f, -0.817700f, 0.563500f, -0.117700f,
		-0.424391f, 0.807338f, 0.878827f, 0.000000f, 0.000000f, 0.817600f, -0.563200f, 0.119200f,
		-0.450632f, -0.464902f, 0.886364f, 0.000000f, 0.000000f, 0.817600f, -0.563200f, 0.119200f,
		-0.418455f, 0.805148f, 0.828515f, 0.000000f, 0.000000f, 0.817600f, -0.563200f, 0.119200f,
		-0.450632f, -0.464902f, 0.886364f, 0.323401f, 0.098467f, -0.008400f, -0.786000f, -0.618200f,
		-0.418455f, 0.805148f, 0.828515f, 0.337970f, 0.125594f, -0.008400f, -0.786000f, -0.618200f,
		-0.321001f, -0.512720f, 0.886364f, 0.382095f, 0.098467f, -0.008400f, -0.786000f, -0.618200f,
		-0.418455f, 0.805148f, 0.828515f, 0.337970f, 0.125594f, 0.008400f, 0.786000f, 0.618200f,
		-0.321001f, -0.512720f, 0.886364f, 0.382095f, 0.098467f, 0.008400f, 0.786000f, 0.618200f,
		-0.293810f, 0.759170f, 0.828515f, 0.394406f, 0.125594f, 0.008400f, 0.786000f, 0.618200f,
		0.911093f, 0.314715f, 0.677579f, 0.939958f, 0.196371f, 0.864200f, 0.502900f, 0.014000f,
		0.908126f, 0.315810f, 0.900390f, 0.938614f, 0.091890f, 0.864200f, 0.502900f, 0.014000f,
		0.929012f, -0.973817f, 0.962121f, 0.948071f, 0.062943f, 0.864200f, 0.502900f, 0.014000f,
		0.929012f, -0.973817f, 0.962121f, 0.948071f, 0.062943f, -0.864700f, -0.502000f, -0.013900f,
		0.911093f, 0.314715f, 0.677579f, 0.939958f, 0.196371f, -0.864700f, -0.502000f, -0.013900f,
		0.932098f, -0.974953f, 0.727273f, 0.949468f, 0.173068f, -0.864700f, -0.502000f, -0.013900f,
		0.911093f, 0.314715f, 0.677579f, 0.939958f, 0.196371f, -0.093300f, -0.756000f, -0.647900f,
		0.955609f, 0.298296f, 0.670391f, 0.960114f, 0.199741f, -0.093300f, -0.756000f, -0.647900f,
		0.932098f, -0.974953f, 0.727273f, 0.949468f, 0.173068f, -0.093300f, -0.756000f, -0.647900f,
		0.932098f, -0.974953f, 0.727273f, 0.949468f, 0.173068f, 0.094500f, 0.755600f, 0.648200f,
		0.978395f, -0.992030f, 0.719697f, 0.970430f, 0.176620f, 0.094500f, 0.755600f, 0.648200f,
		0.955609f, 0.298296f, 0.670391f, 0.960114f, 0.199741f, 0.094500f, 0.755600f, 0.648200f,
		0.955609f, 0.298296f, 0.670391f, 0.960114f, 0.199741f, -0.853500f, -0.521100f, -0.000000f,
		0.955609f, 0.298296f, 0.411642f, 0.960114f, 0.321073f, -0.853500f, -0.521100f, -0.000000f,
		0.978395f, -0.992030f, 0.719697f, 0.970430f, 0.176620f, -0.853500f, -0.521100f, -0.000000f,
		0.978395f, -0.992030f, 0.719697f, 0.970430f, 0.176620f, 0.853500f, 0.521100f, -0.000000f,
		0.978395f, -0.992030f, 0.446970f, 0.970430f, 0.304507f, 0.853500f, 0.521100f, -0.000000f,
		0.955609f, 0.298296f, 0.411642f, 0.960114f, 0.321073f, 0.853500f, 0.521100f, -0.000000f,
		0.978395f, -0.992030f, 0.446970f, 0.970430f, 0.304507f, 0.006500f, 0.613300f, 0.789800f,
		0.976384f, 0.290631f, 0.411643f, 0.969520f, 0.321073f, 0.006500f, 0.613300f, 0.789800f,
		0.955609f, 0.298296f, 0.411642f, 0.960114f, 0.321073f, 0.006500f, 0.613300f, 0.789800f,
		1.000000f, -1.000000f, 0.446970f, 0.980213f, 0.304507f, 0.006500f, 0.613300f, 0.789800f,
		1.000000f, -1.000000f, 0.446970f, 0.980213f, 0.304507f, 0.848400f, 0.529200f, -0.013400f,
		0.958577f, 0.297201f, -0.957569f, 0.961458f, 0.963121f, 0.848400f, 0.529200f, -0.013400f,
		0.976384f, 0.290631f, 0.411643f, 0.969520f, 0.321073f, 0.848400f, 0.529200f, -0.013400f,
		0.981481f, -0.993170f, -0.996212f, 0.971828f, 0.981242f, 0.848400f, 0.529200f, -0.013400f,
		0.490736f, -0.812148f, -1.000000f, 0.749630f, 0.983018f, 0.011700f, 0.649000f, -0.760700f,
		0.958577f, 0.297201f, -0.957569f, 0.961458f, 0.963121f, 0.009800f, 0.648400f, -0.761200f,
		0.981481f, -0.993170f, -0.996212f, 0.971828f, 0.981242f, 0.013600f, 0.650000f, -0.759800f,
		0.490736f, -0.812148f, -1.000000f, 0.749630f, 0.983018f, 0.011600f, 0.649500f, -0.760300f,
		0.486706f, 0.471261f, -0.961162f, 0.747806f, 0.964806f, 0.011600f, 0.649500f, -0.760300f,
		0.481476f, -0.808731f, -0.655303f, 0.000000f, 0.000000f, -0.996100f, -0.081300f, -0.033000f,
		0.486706f, 0.471261f, -0.961162f, 0.000000f, 0.000000f, -0.996100f, -0.081400f, -0.033000f,
		0.490736f, -0.812148f, -1.000000f, 0.000000f, 0.000000f, -0.996200f, -0.081000f, -0.032900f,
		0.481476f, -0.808731f, -0.655303f, 0.000000f, 0.000000f, -0.996000f, -0.083100f, -0.033200f,
		0.477803f, 0.474546f, -0.634133f, 0.000000f, 0.000000f, -0.996000f, -0.083100f, -0.033200f,
		0.486706f, 0.471261f, -0.961162f, 0.000000f, 0.000000f, -0.996000f, -0.083100f, -0.033200f,
		0.746911f, -0.906642f, -0.484848f, 0.000000f, 0.000000f, -0.941200f, -0.330700f, -0.069000f,
		0.741932f, 0.377114f, -0.619758f, 0.000000f, 0.000000f, -0.941200f, -0.330700f, -0.069000f,
		0.756170f, -0.910059f, -0.640152f, 0.000000f, 0.000000f, -0.941200f, -0.330700f, -0.069000f,
		0.746911f, -0.906642f, -0.484848f, 0.000000f, 0.000000f, -0.940700f, -0.331900f, -0.069500f,
		0.733029f, 0.380399f, -0.472415f, 0.000000f, 0.000000f, -0.940700f, -0.331900f, -0.069500f,
		0.741932f, 0.377114f, -0.619758f, 0.000000f, 0.000000f, -0.940700f, -0.331900f, -0.069500f,
		0.477803f, 0.474546f, -0.634133f, 0.000000f, 0.000000f, 0.044600f, 0.425900f, -0.903700f,
		0.741932f, 0.377114f, -0.619758f, 0.000000f, 0.000000f, 0.044600f, 0.424700f, -0.904200f,
		0.481476f, -0.808731f, -0.655303f, 0.000000f, 0.000000f, 0.044600f, 0.424700f, -0.904200f,
		0.746911f, -0.906642f, -0.484848f, 0.000000f, 0.000000f, -0.001900f, -0.263700f, 0.964600f,
		0.789416f, 0.359599f, -0.472415f, 0.000000f, 0.000000f, -0.002800f, -0.263600f, 0.964600f,
		0.733029f, 0.380399f, -0.472415f, 0.000000f, 0.000000f, -0.004000f, -0.263600f, 0.964600f,
		0.746911f, -0.906642f, -0.484848f, 0.000000f, 0.000000f, -0.001700f, -0.263700f, 0.964600f,
		0.805554f, -0.928276f, -0.484848f, 0.000000f, 0.000000f, -0.002800f, -0.263600f, 0.964600f,
		0.805554f, -0.928276f, -0.484848f, 0.000000f, 0.000000f, -0.916900f, -0.399100f, 0.006600f,
		0.792384f, 0.358504f, 0.030707f, 0.000000f, 0.000000f, -0.916900f, -0.399100f, 0.006600f,
		0.789416f, 0.359599f, -0.472415f, 0.000000f, 0.000000f, -0.916900f, -0.399100f, 0.006600f,
		0.805554f, -0.928276f, -0.484848f, 0.000000f, 0.000000f, -0.917300f, -0.398200f, 0.006500f,
		0.808640f, -0.929412f, 0.045454f, 0.000000f, 0.000000f, -0.917300f, -0.398200f, 0.006500f,
		0.792384f, 0.358504f, 0.030707f, 0.000000f, 0.000000f, -0.917300f, -0.398200f, 0.006500f,
		0.716047f, -0.895259f, 0.030303f, 0.000000f, 0.000000f, 0.124400f, -0.253100f, -0.959400f,
		0.792384f, 0.358504f, 0.030707f, 0.000000f, 0.000000f, 0.124400f, -0.253100f, -0.959400f,
		0.808640f, -0.929412f, 0.045454f, 0.000000f, 0.000000f, 0.124400f, -0.253100f, -0.959400f,
		0.716047f, -0.895259f, 0.030303f, 0.000000f, 0.000000f, 0.124400f, -0.253200f, -0.959400f,
		0.703351f, 0.391348f, 0.016332f, 0.000000f, 0.000000f, 0.124400f, -0.253200f, -0.959400f,
		0.792384f, 0.358504f, 0.030707f, 0.000000f, 0.000000f, 0.124400f, -0.253200f, -0.959400f,
		0.722219f, -0.897535f, -0.310606f, 0.854440f, 0.659748f, -0.944900f, -0.326800f, -0.021200f,
		0.703351f, 0.391348f, 0.016332f, 0.845897f, 0.506441f, -0.944900f, -0.326800f, -0.021200f,
		0.709287f, 0.389158f, -0.307104f, 0.848585f, 0.658106f, -0.944900f, -0.326800f, -0.021200f,
		0.722219f, -0.897535f, -0.310606f, 0.854440f, 0.659748f, -0.944600f, -0.327700f, -0.021100f,
		0.716047f, -0.895259f, 0.030303f, 0.851646f, 0.499890f, -0.943900f, -0.329600f, -0.020900f,
		0.703351f, 0.391348f, 0.016332f, 0.845897f, 0.506441f, -0.944600f, -0.327700f, -0.021100f,
		0.657404f, -0.873625f, -0.318182f, 0.825093f, 0.663301f, -0.094900f, -0.109800f, 0.989400f,
		0.709287f, 0.389158f, -0.307104f, 0.848585f, 0.658106f, -0.094800f, -0.109900f, 0.989400f,
		0.646964f, 0.412148f, -0.314291f, 0.820367f, 0.661476f, -0.094800f, -0.109900f, 0.989400f,
		0.657404f, -0.873625f, -0.318182f, 0.825093f, 0.663301f, -0.095400f, -0.109000f, 0.989400f,
		0.722219f, -0.897535f, -0.310606f, 0.854440f, 0.659748f, -0.095400f, -0.109000f, 0.989400f,
		0.709287f, 0.389158f, -0.307104f, 0.848585f, 0.658106f, -0.095400f, -0.109000f, 0.989400f,
		0.657404f, -0.873625f, -0.318182f, 0.825093f, 0.663301f, 0.959000f, 0.259500f, 0.114000f,
		0.652900f, 0.409958f, -0.375384f, 0.823054f, 0.690124f, 0.959200f, 0.258900f, 0.113500f,
		0.646964f, 0.412148f, -0.314291f, 0.820367f, 0.661476f, 0.959000f, 0.259500f, 0.114000f,
		0.561724f, -0.838331f, -0.393939f, 0.781772f, 0.698825f, 0.090400f, 0.181800f, -0.979200f,
		0.652900f, 0.409958f, -0.375384f, 0.823054f, 0.690124f, 0.091500f, 0.181800f, -0.979100f,
		0.663577f, -0.875901f, -0.382576f, 0.827888f, 0.693496f, 0.089500f, 0.182200f, -0.979200f,
		0.561724f, -0.838331f, -0.393939f, 0.781772f, 0.698825f, 0.090100f, 0.182400f, -0.979100f,
		0.554964f, 0.446082f, -0.386166f, 0.778711f, 0.695180f, 0.089800f, 0.183300f, -0.979000f,
		0.652900f, 0.409958f, -0.375384f, 0.823054f, 0.690124f, 0.090900f, 0.182400f, -0.979000f,
		0.561724f, -0.838331f, -0.393939f, 0.781772f, 0.698825f, -0.982500f, -0.163400f, -0.089900f,
		0.563868f, 0.442797f, -0.504759f, 0.782743f, 0.750790f, -0.982700f, -0.161900f, -0.089800f,
		0.570983f, -0.841748f, -0.518939f, 0.785964f, 0.757440f, -0.982700f, -0.161900f, -0.089800f,
		0.561724f, -0.838331f, -0.393939f, 0.781772f, 0.698825f, -0.982400f, -0.163400f, -0.090300f,
		0.554964f, 0.446082f, -0.386166f, 0.778711f, 0.695180f, -0.982700f, -0.162100f, -0.089800f,
		0.563868f, 0.442797f, -0.504759f, 0.782743f, 0.750790f, -0.982700f, -0.162100f, -0.089800f,
		0.240733f, -0.719930f, -0.518939f, 0.636435f, 0.757440f, -0.003200f, -0.297600f, 0.954700f,
		0.563868f, 0.442797f, -0.504759f, 0.782743f, 0.750790f, -0.003200f, -0.297600f, 0.954700f,
		0.246319f, 0.559934f, -0.504759f, 0.638964f, 0.750790f, -0.003200f, -0.297600f, 0.954700f,
		0.570983f, -0.841748f, -0.518939f, 0.785964f, 0.757440f, -0.001800f, -0.297800f, 0.954600f,
		0.237647f, -0.718789f, -0.109848f, 0.635037f, 0.565609f, 0.988500f, -0.151000f, 0.009300f,
		0.246319f, 0.559934f, -0.504759f, 0.638964f, 0.750790f, 0.988500f, -0.151000f, 0.009300f,
		0.243351f, 0.561029f, -0.116636f, 0.637620f, 0.568792f, 0.988500f, -0.151000f, 0.009300f,
		0.237647f, -0.718789f, -0.109848f, 0.635037f, 0.565609f, 0.988400f, -0.151500f, 0.009200f,
		0.240733f, -0.719930f, -0.518939f, 0.636435f, 0.757440f, 0.988400f, -0.151500f, 0.009200f,
		0.246319f, 0.559934f, -0.504759f, 0.638964f, 0.750790f, 0.988400f, -0.151500f, 0.009200f,
		0.237647f, -0.718789f, -0.109848f, 0.000000f, 0.000000f, 0.024000f, 0.145200f, 0.989100f,
		0.112771f, 0.609193f, -0.113042f, 0.000000f, 0.000000f, 0.023900f, 0.144800f, 0.989200f,
		0.101843f, -0.668695f, -0.106061f, 0.000000f, 0.000000f, 0.024000f, 0.145200f, 0.989100f,
		0.101843f, -0.668695f, -0.231061f, 0.000000f, 0.000000f, 0.959000f, -0.283600f, -0.000000f,
		0.112771f, 0.609193f, -0.113042f, 0.000000f, 0.000000f, 0.959000f, -0.283600f, -0.000000f,
		0.101843f, -0.668695f, -0.106061f, 0.000000f, 0.000000f, 0.959000f, -0.283600f, -0.000000f,
		0.112771f, 0.609193f, -0.231635f, 0.000000f, 0.000000f, 0.959000f, -0.283600f, -0.000000f,
		0.154312f, -0.688049f, -0.231061f, 0.000000f, 0.000000f, -0.000100f, -0.012600f, -0.999900f,
		0.112771f, 0.609193f, -0.231635f, 0.000000f, 0.000000f, -0.000100f, -0.012600f, -0.999900f,
		0.163222f, 0.590584f, -0.231635f, 0.000000f, 0.000000f, -0.000100f, -0.012600f, -0.999900f,
		0.101843f, -0.668695f, -0.231061f, 0.000000f, 0.000000f, -0.000100f, -0.012600f, -0.999900f,
		0.154312f, -0.688049f, -0.231061f, 0.000000f, 0.000000f, -0.971600f, 0.235400f, -0.025400f,
		0.172126f, 0.587299f, -0.648508f, 0.000000f, 0.000000f, -0.971500f, 0.235700f, -0.025300f,
		0.163572f, -0.691466f, -0.670454f, 0.000000f, 0.000000f, -0.971600f, 0.235400f, -0.025400f,
		0.154312f, -0.688049f, -0.231061f, 0.000000f, 0.000000f, -0.971600f, 0.235300f, -0.025400f,
		0.163222f, 0.590584f, -0.231635f, 0.000000f, 0.000000f, -0.971600f, 0.235300f, -0.025400f,
		0.172126f, 0.587299f, -0.648508f, 0.000000f, 0.000000f, -0.971600f, 0.235300f, -0.025400f,
		0.237647f, -0.718789f, -0.109848f, 0.000000f, 0.000000f, 0.023800f, 0.144500f, 0.989200f,
		0.243351f, 0.561029f, -0.116636f, 0.000000f, 0.000000f, 0.023800f, 0.144500f, 0.989200f,
		0.112771f, 0.609193f, -0.113042f, 0.000000f, 0.000000f, 0.023800f, 0.144500f, 0.989200f,
		0.163572f, -0.691466f, -0.670454f, 0.601498f, 0.828488f, -0.152300f, -0.402600f, 0.902600f,
		0.118706f, 0.607008f, -0.659289f, 0.581184f, 0.823252f, -0.153700f, -0.402300f, 0.902500f,
		0.108016f, -0.670972f, -0.681818f, 0.576343f, 0.833817f, -0.153900f, -0.402500f, 0.902400f,
		0.163572f, -0.691466f, -0.670454f, 0.601498f, 0.828488f, -0.152800f, -0.401400f, 0.903100f,
		0.172126f, 0.587299f, -0.648508f, 0.605371f, 0.818197f, -0.152800f, -0.401400f, 0.903100f,
		0.118706f, 0.607008f, -0.659289f, 0.581184f, 0.823252f, -0.152800f, -0.401400f, 0.903100f,
		0.108016f, -0.670972f, -0.681818f, 0.000000f, 0.000000f, 0.961000f, -0.276600f, -0.000400f,
		0.118706f, 0.607008f, -0.684445f, 0.000000f, 0.000000f, 0.960600f, -0.277900f, -0.000000f,
		0.118706f, 0.607008f, -0.659289f, 0.000000f, 0.000000f, 0.961000f, -0.276400f, -0.000000f,
		0.108016f, -0.670972f, -0.708333f, 0.000000f, 0.000000f, 0.960600f, -0.277900f, -0.000000f,
		0.108016f, -0.670972f, -0.708333f, 0.576343f, 0.846250f, 0.031400f, 0.458600f, -0.888100f,
		-0.077165f, 0.679256f, -0.691633f, 0.492498f, 0.838418f, 0.031400f, 0.458600f, -0.888100f,
		0.118706f, 0.607008f, -0.684445f, 0.581184f, 0.835048f, 0.031400f, 0.458600f, -0.888100f,
		0.108016f, -0.670972f, -0.708333f, 0.576343f, 0.846250f, 0.031800f, 0.460000f, -0.887300f,
		-0.095690f, -0.595831f, -0.715909f, 0.484110f, 0.849802f, 0.031800f, 0.460000f, -0.887300f,
		-0.077165f, 0.679256f, -0.691633f, 0.492498f, 0.838418f, 0.031800f, 0.460000f, -0.887300f,
		-0.095690f, -0.595831f, -0.685606f, 0.484110f, 0.835593f, -0.893600f, 0.448900f, -0.000000f,
		-0.077165f, 0.679256f, -0.691633f, 0.492498f, 0.838418f, -0.893600f, 0.448800f, 0.000500f,
		-0.095690f, -0.595831f, -0.715909f, 0.484110f, 0.849802f, -0.893600f, 0.448900f, -0.000000f,
		-0.077165f, 0.679256f, -0.662883f, 0.492498f, 0.824937f, -0.893600f, 0.448900f, -0.000000f,
		-0.077165f, 0.679256f, -0.691633f, 0.492498f, 0.838418f, -0.893700f, 0.448700f, 0.000700f,
		-0.095690f, -0.595831f, -0.685606f, 0.484110f, 0.835593f, -0.111100f, 0.490000f, -0.864600f,
		-0.142455f, 0.703341f, -0.652102f, 0.462936f, 0.819882f, -0.111100f, 0.490000f, -0.864600f,
		-0.077165f, 0.679256f, -0.662883f, 0.492498f, 0.824937f, -0.111100f, 0.490000f, -0.864600f,
		-0.095690f, -0.595831f, -0.685606f, 0.484110f, 0.835593f, -0.112000f, 0.489100f, -0.865000f,
		-0.163592f, -0.570784f, -0.674242f, 0.453366f, 0.830264f, -0.112800f, 0.488400f, -0.865300f,
		-0.142455f, 0.703341f, -0.652102f, 0.462936f, 0.819882f, -0.112000f, 0.489100f, -0.865000f,
		-0.163592f, -0.570784f, -0.268939f, 0.453366f, 0.640210f, -0.867400f, 0.497600f, -0.000000f,
		-0.142455f, 0.703341f, -0.652102f, 0.462936f, 0.819882f, -0.867300f, 0.497700f, -0.000900f,
		-0.163592f, -0.570784f, -0.674242f, 0.453366f, 0.830264f, -0.867400f, 0.497600f, -0.000000f,
		-0.142455f, 0.703341f, -0.267572f, 0.462936f, 0.639569f, -0.867400f, 0.497600f, -0.000000f,
		-0.142455f, 0.703341f, -0.652102f, 0.462936f, 0.819882f, -0.867300f, 0.497700f, -0.001000f,
		-0.104950f, -0.592414f, -0.268939f, 0.000000f, 0.000000f, -0.000300f, -0.030000f, 0.999500f,
		-0.142455f, 0.703341f, -0.267572f, 0.000000f, 0.000000f, -0.000300f, -0.030000f, 0.999500f,
		-0.163592f, -0.570784f, -0.268939f, 0.000000f, 0.000000f, -0.000300f, -0.030000f, 0.999500f,
		-0.086068f, 0.682541f, -0.267572f, 0.000000f, 0.000000f, -0.000300f, -0.030000f, 0.999500f,
		-0.104950f, -0.592414f, -0.219697f, 0.479918f, 0.617119f, -0.890100f, 0.455800f, -0.000000f,
		-0.086068f, 0.682541f, -0.267572f, 0.488467f, 0.639569f, -0.890100f, 0.455800f, -0.000000f,
		-0.104950f, -0.592414f, -0.268939f, 0.479918f, 0.640210f, -0.890100f, 0.455800f, -0.000000f,
		-0.086068f, 0.682541f, -0.220854f, 0.488467f, 0.617662f, -0.890100f, 0.455800f, -0.000000f,
		-0.067912f, -0.606078f, -0.219697f, 0.496688f, 0.617119f, 0.000300f, 0.025400f, 0.999700f,
		-0.086068f, 0.682541f, -0.220854f, 0.488467f, 0.617662f, 0.000300f, 0.025400f, 0.999700f,
		-0.104950f, -0.592414f, -0.219697f, 0.479918f, 0.617119f, 0.000300f, 0.025400f, 0.999700f,
		-0.050455f, 0.669406f, -0.220854f, 0.504592f, 0.617662f, 0.000300f, 0.025400f, 0.999700f,
		-0.067912f, -0.606078f, -0.219697f, 0.496688f, 0.617119f, -0.902900f, 0.428200f, 0.036800f,
		-0.047487f, 0.668311f, -0.131011f, 0.505935f, 0.575533f, -0.902900f, 0.428200f, 0.036800f,
		-0.050455f, 0.669406f, -0.220854f, 0.504592f, 0.617662f, -0.902900f, 0.428200f, 0.036800f,
		-0.067912f, -0.606078f, -0.219697f, 0.496688f, 0.617119f, -0.902600f, 0.429000f, 0.036300f,
		-0.064826f, -0.607218f, -0.125000f, 0.498085f, 0.572714f, -0.902600f, 0.429000f, 0.036300f,
		-0.047487f, 0.668311f, -0.131011f, 0.505935f, 0.575533f, -0.902600f, 0.429000f, 0.036300f,
		-0.064826f, -0.607218f, -0.125000f, 0.000000f, 0.000000f, 0.064900f, 0.103100f, 0.992600f,
		-0.231487f, 0.736180f, -0.116636f, 0.000000f, 0.000000f, 0.064700f, 0.103600f, 0.992500f,
		-0.256186f, -0.536631f, -0.109848f, 0.000000f, 0.000000f, 0.064700f, 0.103600f, 0.992500f,
		-0.064826f, -0.607218f, -0.125000f, 0.000000f, 0.000000f, 0.064800f, 0.103000f, 0.992600f,
		-0.047487f, 0.668311f, -0.131011f, 0.000000f, 0.000000f, 0.064700f, 0.103000f, 0.992600f,
		-0.231487f, 0.736180f, -0.116636f, 0.000000f, 0.000000f, 0.064700f, 0.103400f, 0.992500f,
		-0.256186f, -0.536631f, -0.109848f, 0.000000f, 0.000000f, -0.831000f, 0.556000f, -0.018500f,
		-0.222584f, 0.732899f, -0.562258f, 0.000000f, 0.000000f, -0.831100f, 0.555800f, -0.020400f,
		-0.246926f, -0.540043f, -0.579545f, 0.000000f, 0.000000f, -0.831000f, 0.555900f, -0.020400f,
		-0.256186f, -0.536631f, -0.109848f, 0.000000f, 0.000000f, -0.831000f, 0.556000f, -0.018600f,
		-0.231487f, 0.736180f, -0.116636f, 0.000000f, 0.000000f, -0.831000f, 0.555800f, -0.020400f,
		-0.222584f, 0.732899f, -0.562258f, 0.000000f, 0.000000f, -0.831700f, 0.554900f, -0.020500f,
		-0.246926f, -0.540043f, -0.579545f, 0.415634f, 0.785859f, 0.003600f, 0.354300f, -0.935100f,
		-0.308649f, 0.764644f, -0.562258f, 0.387688f, 0.777753f, 0.003800f, 0.355200f, -0.934800f,
		-0.222584f, 0.732899f, -0.562258f, 0.426656f, 0.777753f, 0.003100f, 0.354400f, -0.935100f,
		-0.246926f, -0.540043f, -0.579545f, 0.415634f, 0.785859f, 0.003600f, 0.354200f, -0.935200f,
		-0.336433f, -0.507026f, -0.579545f, 0.375107f, 0.785859f, 0.003800f, 0.355200f, -0.934800f,
		-0.333347f, -0.508167f, -0.515151f, 0.376505f, 0.755663f, -0.805700f, 0.590400f, 0.047800f,
		-0.308649f, 0.764644f, -0.562258f, 0.387688f, 0.777753f, -0.805700f, 0.590400f, 0.047800f,
		-0.336433f, -0.507026f, -0.579545f, 0.375107f, 0.785859f, -0.805700f, 0.590400f, 0.047800f,
		-0.333347f, -0.508167f, -0.515151f, 0.376505f, 0.755663f, -0.805400f, 0.590800f, 0.048400f,
		-0.305681f, 0.763549f, -0.501165f, 0.389031f, 0.749105f, -0.805400f, 0.590800f, 0.048400f,
		-0.308649f, 0.764644f, -0.562258f, 0.387688f, 0.777753f, -0.805400f, 0.590800f, 0.048400f,
		-0.305681f, 0.763549f, -0.501165f, 0.000000f, 0.000000f, 0.339600f, -0.490700f, 0.802400f,
		-0.333347f, -0.508167f, -0.515151f, 0.000000f, 0.000000f, 0.339600f, -0.490700f, 0.802400f,
		-0.296309f, -0.521826f, -0.515151f, 0.000000f, 0.000000f, 0.339600f, -0.490700f, 0.802400f,
		-0.296309f, -0.521826f, -0.515151f, 0.000000f, 0.000000f, 0.339900f, -0.490900f, 0.802200f,
		-0.246926f, -0.540043f, -0.579545f, 0.000000f, 0.000000f, 0.339900f, -0.490900f, 0.802200f,
		-0.270068f, 0.750414f, -0.501165f, 0.000000f, 0.000000f, 0.339900f, -0.490900f, 0.802200f,
		-0.270068f, 0.750414f, -0.501165f, 0.000000f, 0.000000f, 0.339600f, -0.490700f, 0.802400f,
		-0.296309f, -0.521826f, -0.515151f, 0.000000f, 0.000000f, 0.339600f, -0.490800f, 0.802400f,
		-0.305569f, -0.518413f, -0.113636f, 0.000000f, 0.000000f, -0.072800f, 0.165800f, 0.983500f,
		-0.602455f, 0.873021f, -0.127417f, 0.000000f, 0.000000f, -0.016400f, 0.154800f, 0.987800f,
		-0.641992f, -0.394315f, -0.121212f, 0.000000f, 0.000000f, -0.016400f, 0.154900f, 0.987800f,
		-0.296309f, -0.521826f, -0.515151f, 0.393275f, 0.755663f, -0.800500f, 0.594100f, -0.078900f,
		-0.305569f, -0.518413f, -0.113636f, 0.389082f, 0.567385f, -0.800500f, 0.594100f, -0.078900f,
		-0.270068f, 0.750414f, -0.501165f, 0.405156f, 0.749105f, -0.800500f, 0.594100f, -0.078900f,
		-0.278971f, 0.753699f, -0.120230f, 0.401125f, 0.570477f, -0.800500f, 0.594100f, -0.078900f,
		-0.278971f, 0.753699f, -0.120230f, 0.000000f, 0.000000f, -0.016400f, 0.155000f, 0.987800f,
		-0.602455f, 0.873021f, -0.127417f, 0.000000f, 0.000000f, -0.016300f, 0.155200f, 0.987700f,
		-0.641992f, -0.394315f, -0.121212f, 0.000000f, 0.000000f, -0.678900f, 0.733800f, 0.025500f,
		-0.613560f, 0.877116f, -0.481380f, 0.000000f, 0.000000f, -0.678600f, 0.734100f, 0.026200f,
		-0.653541f, -0.390055f, -0.494298f, 0.000000f, 0.000000f, -0.678500f, 0.734100f, 0.026200f,
		-0.602455f, 0.873021f, -0.127417f, 0.000000f, 0.000000f, -0.678600f, 0.734100f, 0.026200f,
		-0.613560f, 0.877116f, -0.481380f, 0.000000f, 0.000000f, -0.678500f, 0.734100f, 0.026300f,
		0.652900f, 0.409958f, -0.375384f, 0.823054f, 0.690124f, 0.959700f, 0.257800f, 0.111700f,
		0.657404f, -0.873625f, -0.318182f, 0.825093f, 0.663301f, 0.959600f, 0.257800f, 0.112600f,
		0.663577f, -0.875901f, -0.382576f, 0.827888f, 0.693496f, 0.959100f, 0.258700f, 0.114600f,
		0.561724f, -0.838331f, -0.393939f, 0.000000f, 0.000000f, -0.010500f, -0.999900f, -0.001500f,
		0.663577f, -0.875901f, -0.382576f, 0.000000f, 0.000000f, -0.012700f, -0.999900f, 0.000900f,
	};






	Mesh* obj1 = new Mesh();
	obj1->CreateMesh(vertices, indices, 32, 12);
	meshList.push_back(obj1);

	Mesh* obj2 = new Mesh();
	obj2->CreateMesh(vertices, indices, 32, 12);
	meshList.push_back(obj2);

	Mesh* obj3 = new Mesh();
	obj3->CreateMesh(Suelo3DVertices, Suelo3DIndices, 3200, 594);
	meshList.push_back(obj3);

	calcAverageNormals(indices, 12, vertices, 32, 8, 5);
}


void CreateShaders()
{
	Shader *shader1 = new Shader();
	shader1->CreateFromFiles(vShader, fShader);
	shaderList.push_back(*shader1);
}



int main()
{
	mainWindow = Window(1366, 768); // 1280, 1024 or 1024, 768
	mainWindow.Initialise();

	CreateObjects();
	CrearCilindro(10, 1.0f);//índice 2 en MeshList
	CreateShaders();

	camera = Camera(glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f), -60.0f, 0.0f, 0.3f, 0.5f);

	pisoTexture = Texture("Textures/grass_texture.tga");
	pisoTexture.LoadTextureA();

	CentroPokemon_M = Model();
	CentroPokemon_M.LoadModel("Models/centroPokemon.obj");

	centroPokemonTexture = Texture("Textures/centroPokemon.tga");
	centroPokemonTexture.LoadTextureA();

	Ichiraku_M = Model();
	Ichiraku_M.LoadModel("Models/ichiraku.dae");

	ichirakuTexture = Texture("Textures/ichiraku.png");
	ichirakuTexture.LoadTextureA();

	Arco_M = Model();
	Arco_M.LoadModel("Models/Arco.dae");

	stoneTexture = Texture("Textures/stone.tga");
	stoneTexture.LoadTextureA();

	PortonIzquierdo_M = Model();
	PortonIzquierdo_M.LoadModel("Models/Gate-Left.dae");
	PortonDerecho_M = Model();
	PortonDerecho_M.LoadModel("Models/Gate-Left.dae");

	blackMetalTexture = Texture("Textures/black_metal.tga");
	blackMetalTexture.LoadTextureA();

	Letrero_M = Model();
	Letrero_M.LoadModel("Models/Letrero.dae");
	letreroTexture = Texture("Textures/letrero.tga");
	letreroTexture.LoadTextureA();

	Puerto_M = Model();
	Puerto_M.LoadModel("Models/Puerto.dae");
	puertoTexture = Texture("Textures/harbor_texture.png");
	puertoTexture.LoadTextureA();

	Torii_M = Model();
	Torii_M.LoadModel("Models/torii.dae");
	toriiTexture = Texture("Textures/torii.png");
	toriiTexture.LoadTextureA();

	PuestoTacos_M = Model();
	PuestoTacos_M.LoadModel("Models/puesto_tacos.dae");
	puestoTacosTexture = Texture("Textures/taco_texture.png");
	puestoTacosTexture.LoadTextureA();

	PuestoElotes_M = Model();
	PuestoElotes_M.LoadModel("Models/carroElote.dae");
	puestoElotesTexture = Texture("Textures/tostiesquites.png");
	puestoElotesTexture.LoadTextureA();

	PuestoPozole_M = Model();
	PuestoPozole_M.LoadModel("Models/puestopozole.dae");
	puestoPozoleTexture = Texture("Textures/puestopozole.png");
	puestoPozoleTexture.LoadTextureA();

	PuestoPlantas_M = Model();
	PuestoPlantas_M.LoadModel("Models/puesto_plantas.dae");
	puestoPlantasTexture = Texture("Textures/puesto_plantas.png");
	puestoPlantasTexture.LoadTextureA();

	PuestoRecuerdos_M = Model();
	PuestoRecuerdos_M.LoadModel("Models/puestorecuerdos.dae");
	puestoRecuerdosTexture = Texture("Textures/puestorecuerdos.png");
	puestoRecuerdosTexture.LoadTextureA();

	PuestoLuchas_M = Model();
	PuestoLuchas_M.LoadModel("Models/puestoLuchas.dae");
	puestoLuchasTexture = Texture("Textures/puestoLucha.png");
	puestoLuchasTexture.LoadTextureA();

	Bangboo_M = Model();
	Bangboo_M.LoadModel("Models/bangboo.dae");
	bangbooTexture = Texture("Textures/file1.001.png");
	bangbooTexture.LoadTextureA();
	
	Stool_M = Model();
	Stool_M.LoadModel("Models/stool.dae");
	stoolTexture = Texture("Textures/file2.001.png");
	stoolTexture.LoadTextureA();

	farolaTexture = Texture("Textures/texture_lamp.tga");
	farolaTexture.LoadTextureA();

	Farola_M = Model();
	Farola_M.LoadModel("Models/Farola.fbx");
	
	pokefanTexture = Texture("Textures/pokefan.png");
	pokefanTexture.LoadTextureA();
	Pokefan_M = Model();
	Pokefan_M.LoadModel("Models/pokefan.dae");

	pokeshopTexture = Texture("Textures/pokeshop.png");
	pokeshopTexture.LoadTextureA();
	Pokeshop_M = Model();
	Pokeshop_M.LoadModel("Models/pokeshop.dae");

	piramideTexture = Texture("Textures/piramidetexture.png");
	piramideTexture.LoadTextureA();
	Piramide_M = Model();
	Piramide_M.LoadModel("Models/piramide.dae");

	calendarioMayaTexture = Texture("Textures/calendario_maya.tga");
	calendarioMayaTexture.LoadTextureA();

	hawluchaTexture = Texture("Textures/hawlucha.png");
	hawluchaTexture.LoadTextureA();
	Hawlucha_M = Model();
	Hawlucha_M.LoadModel("Models/hawlucha.dae");

	ringTexture = Texture("Textures/ring.tga");
	ringTexture.LoadTextureA();
	Ring_M = Model();
	Ring_M.LoadModel("Models/ring.dae");

	caminoTexture = Texture("Textures/mosaico.png");
	caminoTexture.LoadTextureA();
	Camino_M = Model();
	Camino_M.LoadModel("Models/camino.dae");

	sillaTexture = Texture("Textures/silla.png");
	sillaTexture.LoadTextureA();
	Silla_M = Model();
	Silla_M.LoadModel("Models/silla.dae");

	pidgeyTexture = Texture("Textures/pidgey.png");
	pidgeyTexture.LoadTextureA();
	Pidgey_M = Model();
	Pidgey_M.LoadModel("Models/pidgey.dae");

	std::vector<std::string> skyboxFaces;
	skyboxFaces.push_back("Textures/Skybox/cupertin-lake_rt.tga");
	skyboxFaces.push_back("Textures/Skybox/cupertin-lake_lf.tga");
	skyboxFaces.push_back("Textures/Skybox/cupertin-lake_dn.tga");
	skyboxFaces.push_back("Textures/Skybox/cupertin-lake_up.tga");
	skyboxFaces.push_back("Textures/Skybox/cupertin-lake_bk.tga");
	skyboxFaces.push_back("Textures/Skybox/cupertin-lake_ft.tga");

	skybox = Skybox(skyboxFaces);

	Material_brillante = Material(4.0f, 256);
	Material_opaco = Material(0.3f, 4);

	GLuint uniformProjection = 0, uniformModel = 0, uniformView = 0, uniformEyePosition = 0,
		uniformSpecularIntensity = 0, uniformShininess = 0;
	GLuint uniformColor = 0;
	glm::mat4 projection = glm::perspective(45.0f, (GLfloat)mainWindow.getBufferWidth() / mainWindow.getBufferHeight(), 0.1f, 1000.0f);
	float anguloVuelo = 0.0f;

	////Loop mientras no se cierra la ventana
	while (!mainWindow.getShouldClose())
	{
		GLfloat now = glfwGetTime();
		deltaTime = now - lastTime;
		deltaTime += (now - lastTime) / limitFPS;
		lastTime = now;

		//Recibir eventos del usuario
		glfwPollEvents();
		camera.keyControl(mainWindow.getsKeys(), deltaTime);
		camera.mouseControl(mainWindow.getXChange(), mainWindow.getYChange());

		// Clear the window
		glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		skybox.DrawSkybox(camera.calculateViewMatrix(), projection);
		shaderList[0].UseShader();
		uniformModel = shaderList[0].GetModelLocation();
		uniformProjection = shaderList[0].GetProjectionLocation();
		uniformView = shaderList[0].GetViewLocation();
		uniformEyePosition = shaderList[0].GetEyePositionLocation();
		uniformColor = shaderList[0].getColorLocation();
		
		//informaci�n en el shader de intensidad especular y brillo
		uniformSpecularIntensity = shaderList[0].GetSpecularIntensityLocation();
		uniformShininess = shaderList[0].GetShininessLocation();

		glUniformMatrix4fv(uniformProjection, 1, GL_FALSE, glm::value_ptr(projection));
		glUniformMatrix4fv(uniformView, 1, GL_FALSE, glm::value_ptr(camera.calculateViewMatrix()));
		glUniform3f(uniformEyePosition, camera.getCameraPosition().x, camera.getCameraPosition().y, camera.getCameraPosition().z);

		glm::mat4 model(1.0);
		glm::mat4 modelaux(1.0);
		glm::vec3 color = glm::vec3(1.0f, 1.0f, 1.0f);

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(0.0f, -5.0f, 0.0f));
		model = glm::scale(model, glm::vec3(100.0f, 1.0f, 100.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		pisoTexture.UseTexture();
		Material_opaco.UseMaterial(uniformSpecularIntensity, uniformShininess);

		meshList[2]->RenderMesh();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(31.0f, -4.45f, 8.75f));
		model = glm::scale(model, glm::vec3(2.42f, 1.0f, 2.9f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		caminoTexture.UseTexture();
		Camino_M.RenderModel();

		anguloVuelo += 2.0f * deltaTime;
		if (anguloVuelo > 360.0f)
			anguloVuelo = 0;

		model = glm::mat4(1.0);

		model = glm::translate(model, glm::vec3(0.0f, 26.0f + 4 * sin(2* anguloVuelo * toRadians), 00.0f));
		model = glm::rotate(model, glm::radians(anguloVuelo), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::translate(model, glm::vec3(0.0f, 0.0f, 20.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pidgeyTexture.UseTexture();
		Pidgey_M.RenderModel();

		model = glm::mat4(1.0);

		model = glm::translate(model, glm::vec3(0.0f, 25.0f + 4 * sin(2 * anguloVuelo * toRadians), 00.0f));
		model = glm::rotate(model, glm::radians(anguloVuelo-35.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::translate(model, glm::vec3(0.0f, 0.0f, 20.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pidgeyTexture.UseTexture();
		Pidgey_M.RenderModel();

		model = glm::mat4(1.0);

		model = glm::translate(model, glm::vec3(0.0f, 28.0f + 4 * sin(2 * anguloVuelo * toRadians), 00.0f));
		model = glm::rotate(model, glm::radians(anguloVuelo-40.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::translate(model, glm::vec3(0.0f, 0.0f, 20.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pidgeyTexture.UseTexture();
		Pidgey_M.RenderModel();

		model = glm::mat4(1.0);

		model = glm::translate(model, glm::vec3(0.0f, 24.0f + 4 * sin(2* anguloVuelo * toRadians), 00.0f));
		model = glm::rotate(model, glm::radians(anguloVuelo+28.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::translate(model, glm::vec3(0.0f, 0.0f, 20.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pidgeyTexture.UseTexture();
		Pidgey_M.RenderModel();

		model = glm::mat4(1.0);

		model = glm::translate(model, glm::vec3(0.0f, 27.0f + 4*sin(2 * anguloVuelo * toRadians), 00.0f));
		model = glm::rotate(model, glm::radians(anguloVuelo+37.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		model = glm::translate(model, glm::vec3(0.0f, 0.0f, 20.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pidgeyTexture.UseTexture();
		Pidgey_M.RenderModel();
		model = glm::mat4(1.0);
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		model = glm::translate(model, glm::vec3(-10.0f, 0.9f, 40.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		centroPokemonTexture.UseTexture();
		CentroPokemon_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(-10.0f, 2.5f, 0.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pokeshopTexture.UseTexture();
		Pokeshop_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(30.0f, 5.0f, -30.0f));
		model = glm::scale(model, glm::vec3(5.0f, 10.0f, 10.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(1.0f, 0.0f, 0.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		calendarioMayaTexture.UseTexture();
		meshList[3]->RenderMesh();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(-10.0f, 2.2f, 70.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		pokefanTexture.UseTexture();
		Pokefan_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(-45.0f, 9.0f, -35.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		piramideTexture.UseTexture();
		Piramide_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		model = glm::translate(model, glm::vec3(6.0f, -5.0f, -68.0f));
		model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puertoTexture.UseTexture();
		Puerto_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(50.0f, -5.0f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		ichirakuTexture.UseTexture();
		Ichiraku_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(100.0f, 0.0f, 18.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		toriiTexture.UseTexture();
		Torii_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.5f, 20.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		hawluchaTexture.UseTexture();
		Hawlucha_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(60.0f, -2.0f, 60.0f));
		model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		ringTexture.UseTexture();
		Ring_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 45.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 45.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 45.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 45.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 50.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 50.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 50.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 50.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 55.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 55.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 55.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 55.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 60.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 60.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 60.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 60.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 65.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 65.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 65.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 65.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 70.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 70.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 70.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 70.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.0f, 75.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(85.0f, -4.0f, 75.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -4.0f, 75.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -4.0f, 75.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		sillaTexture.UseTexture();
		Silla_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -3.7f, 85.0f));
		model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puestoElotesTexture.UseTexture();
		PuestoElotes_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(1.0f, -0.6f, -2.0f));
		modelaux = model;
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		stoolTexture.UseTexture();
		Stool_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, 0.8f, 0.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		bangbooTexture.UseTexture();
		Bangboo_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(60.0f, -3.5f, 85.0f));
		model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puestoTacosTexture.UseTexture();
		PuestoTacos_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, -0.3f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		stoolTexture.UseTexture();
		Stool_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, 0.8f, 0.0f));
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		bangbooTexture.UseTexture();
		Bangboo_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(40.0f, -3.5f, 85.0f));
		model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puestoPozoleTexture.UseTexture();
		PuestoPozole_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, -0.3f, -2.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		stoolTexture.UseTexture();
		Stool_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, 0.8f, 0.0f));
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		bangbooTexture.UseTexture();
		Bangboo_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(60.0f, -3.0f, 40.0f));
		//model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puestoPlantasTexture.UseTexture();
		PuestoPlantas_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, -0.9f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		stoolTexture.UseTexture();
		Stool_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, 0.8f, 0.0f));
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		bangbooTexture.UseTexture();
		Bangboo_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(40.0f, -3.0f, 40.0f));
		//model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puestoRecuerdosTexture.UseTexture();
		PuestoRecuerdos_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.5f, -0.9f, -1.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		stoolTexture.UseTexture();
		Stool_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, 0.8f, 0.0f));
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		bangbooTexture.UseTexture();
		Bangboo_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(20.0f, -3.0f, 60.0f));
		//model = glm::rotate(model, glm::radians(-180.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		puestoLuchasTexture.UseTexture();
		PuestoLuchas_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(3.0, -0.9f, -0.5f));
		model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		modelaux = model;
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		stoolTexture.UseTexture();
		Stool_M.RenderModel();

		model = modelaux;
		model = glm::translate(model, glm::vec3(0.0f, 0.8f, 0.0f));
		model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		bangbooTexture.UseTexture();
		Bangboo_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(90.0f, -4.5f, 36.0f));
		modelaux = model;
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		stoneTexture.UseTexture();
		Arco_M.RenderModel();

		modelaux = model;
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		blackMetalTexture.UseTexture();
		PortonIzquierdo_M.RenderModel();

		modelaux = model;
		model = glm::rotate(model, glm::radians(180.0f), glm::vec3(0.0f, 1.0f, 0.0f));

		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));

		blackMetalTexture.UseTexture();
		PortonDerecho_M.RenderModel();

		modelaux = model;
		model = glm::translate(model, glm::vec3(0.0f, 7.5f, 0.0f));
		model = glm::rotate(model, glm::radians(180.0f), glm::vec3(0.0f, 1.0f, 0.0f));

		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		glUniform3fv(uniformColor, 1, glm::value_ptr(color));

		letreroTexture.UseTexture();
		Letrero_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(95.0f, -5.0f, 36.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(75.0f, -5.0f, 36.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(50.0f, -5.0f, 36.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(40.0f, -5.0f, 50.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(40.0f, -5.0f, 70.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(0.0f, -5.0f, 60.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(20.0f, -5.0f, 30.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(0.0f, -5.0f, 0.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();
		
		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(80.0f, -5.0f, 10.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();

		model = glm::mat4(1.0);
		model = glm::translate(model, glm::vec3(70.0f, -5.0f, 10.0));
		model = glm::scale(model, glm::vec3(0.4f, 0.4f, 0.4f));
		glUniformMatrix4fv(uniformModel, 1, GL_FALSE, glm::value_ptr(model));
		farolaTexture.UseTexture();
		Farola_M.RenderModel();
		/*
		//blending: transparencia o traslucidez
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
		AgaveTexture.UseTexture();
		Material_opaco.UseMaterial(uniformSpecularIntensity, uniformShininess);
		meshList[3]->RenderMesh();
		glDisable(GL_BLEND);
		*/
		glUseProgram(0);

		mainWindow.swapBuffers();
	}

	return 0;
}
